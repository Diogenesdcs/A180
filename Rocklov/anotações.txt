Gemfile: arquivo para configuração do pj aplicações
Gem: frameworks e versões.
env.rb: importação dos módulos dos frameworks e bibliotecas para o projeto.
Rspec: linguagem de programação Ruby para testar o código Ruby
Faker: Gerador de massa de dados faker. para acessar informações das bibliotecas gems ruby faker
clicar area de links home page -> https://github.com/faker-ruby/faker generator ->default . não esquecer de importar 
dentro do arquivo env.rb
Mongo: banco de dados
pageobjects: para encapsulamento de de classes e metodos. 
Pasta Libs: usada para classes criadas no projeto.
Pasta logs: para guardar os logs do pj.
Pasta refacturing: pasta de arquivos refaturados da automação.
Pasta specs: utilizadas para as feature do cucumber bdd.
Pasta step_definitions: utilizadas para colocar os códigos da automação.
Pasta Pages: utilizadas para page objects e configurações de encapsulamento. support > pages > login-page.
fluxo das pages. cria o metodo page depois instância o metodo e depois chama dentro das steps do código atraves do método.
Pasta views: fica guardado as pageobjects e os componentes de steps.
Pasta config: para configuração de ambientes locais e testes
App actions: encapsulamento de pageobjects para melhorar o funcionamento.
hooks: para instanciar método before metodo utilizado para gravar na mémoria de cada chamada do ruby executa antes.
Arquivo cucumber.yml para configurar saidas outputs do cucumber. profiles e criar variaveis de navegadoress
scoop instalador power shell
Allure: servidor de relatorios de logs
comando para habilitar o allure: executar dentro da pasta rocklov 'allure serve logs\'



--Instalando banco de dados robo 3t
	baixar a versão free e instalar a mesma porta de servidor e banco de dados do servidor virtual.
    instalar a biblioteca do mongo e pegar o comando dentro das configurações do mongo e colar no código ruby pelo link
    https://www.mongodb.com/docs/ruby-driver/current/tutorials/quick-start/

    funcão de ligação com o banco
    You can also use a URI connection string:
    client = Mongo::Client.new('mongodb://127.0.0.1:27017/test')
--
Argumentos do cucumber
Separados pelo aspas duplas "Oops. Informe"
--------------------------
cucumber data table com input de dados e referente a tabela.
|nome       |email                     |senha|
|Diógenes   |diogenes-email@hotmail.com|123  |

--------------------------
Esquema de cenário: é uma matriz do cucumber para melhor utilizar 
nas massas de testes repetitivos.
Todo Esquema de cenário tem que ter os placeholder de input e os a matriz de exemplos embaixo.

Esquema do Cenário: Tentativas de login
        Dado que acesso a página principal
        Quando submeto minhas credenciais com "<email_input>" e "<senha_input>"
        Então vejo a mensagem de alerta: "<mensagem_output>"

        Exemplos:
            | email_input        | senha_input | mensagem_output                        |
            | diogenes@yahoo.com | 1234        | Usuário e/ou senha inválidos.          |

--------------------------

Configurando config.app_host = "http://rocklov-web:3000"
dentro do arquivo env.rb para criar rotas de endereços.

--------------------------

Automação front end

pageobjects
#pageobjects
class LoginPage #classes
include Capybara:: DSL #para incluir o visit
    #metodos
    def abrir
    visit "/" #endereço no env.rb
    end

    def campo_email
        return find("input[placeholder='Seu email']")
    end

    def campo_senha
    return find("input[placeholder='Sua senha secreta']")
    end

    def botao_entrar
        return click_button "Entrar"
    end
end


 login_page = LoginPage.new 
    login_page.abrir
    login_page.campo_email.set email
    login_page.campo_senha.set senha
    login_page.botao_entrar

---------------------------------------------
Principais tópicos
- Expressões condicionais
- have_text do Capybara para verificar se contem um texto em uma string
- Encapsulamento de ações

